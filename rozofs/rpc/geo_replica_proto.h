/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _GEO_REPLICA_PROTO_H_RPCGEN
#define _GEO_REPLICA_PROTO_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include <rozofs/rozofs.h>

enum geo_status_t {
	GEO_SUCCESS = 0,
	GEO_FAILURE = 1,
};
typedef enum geo_status_t geo_status_t;

struct geo_sync_req_arg_t {
	uint16_t eid;
	uint16_t site_id;
	uint32_t local_ref;
};
typedef struct geo_sync_req_arg_t geo_sync_req_arg_t;

struct geo_sync_data_ret_t {
	uint16_t eid;
	uint16_t site_id;
	uint64_t file_idx;
	uint32_t local_ref;
	uint32_t remote_ref;
	uint32_t last;
	uint32_t first_record;
	uint32_t nb_records;
	struct {
		u_int data_len;
		char *data_val;
	} data;
};
typedef struct geo_sync_data_ret_t geo_sync_data_ret_t;

struct geo_sync_req_ret_t {
	geo_status_t status;
	union {
		struct geo_sync_data_ret_t data;
		int error;
	} geo_sync_req_ret_t_u;
};
typedef struct geo_sync_req_ret_t geo_sync_req_ret_t;

struct geo_sync_get_next_req_arg_t {
	uint16_t eid;
	uint16_t site_id;
	uint64_t file_idx;
	uint32_t local_ref;
	uint32_t remote_ref;
	uint32_t next_record;
	uint64_t status_bitmap;
};
typedef struct geo_sync_get_next_req_arg_t geo_sync_get_next_req_arg_t;

struct geo_sync_delete_req_arg_t {
	uint16_t eid;
	uint16_t site_id;
	uint64_t file_idx;
	uint32_t local_ref;
	uint32_t remote_ref;
};
typedef struct geo_sync_delete_req_arg_t geo_sync_delete_req_arg_t;

struct geo_sync_close_req_arg_t {
	uint16_t eid;
	uint16_t site_id;
	uint64_t file_idx;
	uint32_t local_ref;
	uint32_t remote_ref;
	uint64_t status_bitmap;
};
typedef struct geo_sync_close_req_arg_t geo_sync_close_req_arg_t;

struct geo_status_ret_t {
	geo_status_t status;
	union {
		int error;
	} geo_status_ret_t_u;
};
typedef struct geo_status_ret_t geo_status_ret_t;

#define GEO_PROGRAM 0x20000010
#define GEO_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define GEO_NULL 0
extern  void * geo_null_1(void *, CLIENT *);
extern  void * geo_null_1_svc(void *, struct svc_req *);
#define GEO_SYNC_REQ 1
extern  geo_sync_req_ret_t * geo_sync_req_1(geo_sync_req_arg_t *, CLIENT *);
extern  geo_sync_req_ret_t * geo_sync_req_1_svc(geo_sync_req_arg_t *, struct svc_req *);
#define GEO_SYNC_GET_NEXT_REQ 2
extern  geo_sync_req_ret_t * geo_sync_get_next_req_1(geo_sync_get_next_req_arg_t *, CLIENT *);
extern  geo_sync_req_ret_t * geo_sync_get_next_req_1_svc(geo_sync_get_next_req_arg_t *, struct svc_req *);
#define GEO_SYNC_DELETE_REQ 3
extern  geo_status_ret_t * geo_sync_delete_req_1(geo_sync_delete_req_arg_t *, CLIENT *);
extern  geo_status_ret_t * geo_sync_delete_req_1_svc(geo_sync_delete_req_arg_t *, struct svc_req *);
#define GEO_SYNC_CLOSE_REQ 4
extern  geo_status_ret_t * geo_sync_close_req_1(geo_sync_close_req_arg_t *, CLIENT *);
extern  geo_status_ret_t * geo_sync_close_req_1_svc(geo_sync_close_req_arg_t *, struct svc_req *);
extern int geo_program_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define GEO_NULL 0
extern  void * geo_null_1();
extern  void * geo_null_1_svc();
#define GEO_SYNC_REQ 1
extern  geo_sync_req_ret_t * geo_sync_req_1();
extern  geo_sync_req_ret_t * geo_sync_req_1_svc();
#define GEO_SYNC_GET_NEXT_REQ 2
extern  geo_sync_req_ret_t * geo_sync_get_next_req_1();
extern  geo_sync_req_ret_t * geo_sync_get_next_req_1_svc();
#define GEO_SYNC_DELETE_REQ 3
extern  geo_status_ret_t * geo_sync_delete_req_1();
extern  geo_status_ret_t * geo_sync_delete_req_1_svc();
#define GEO_SYNC_CLOSE_REQ 4
extern  geo_status_ret_t * geo_sync_close_req_1();
extern  geo_status_ret_t * geo_sync_close_req_1_svc();
extern int geo_program_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_geo_status_t (XDR *, geo_status_t*);
extern  bool_t xdr_geo_sync_req_arg_t (XDR *, geo_sync_req_arg_t*);
extern  bool_t xdr_geo_sync_data_ret_t (XDR *, geo_sync_data_ret_t*);
extern  bool_t xdr_geo_sync_req_ret_t (XDR *, geo_sync_req_ret_t*);
extern  bool_t xdr_geo_sync_get_next_req_arg_t (XDR *, geo_sync_get_next_req_arg_t*);
extern  bool_t xdr_geo_sync_delete_req_arg_t (XDR *, geo_sync_delete_req_arg_t*);
extern  bool_t xdr_geo_sync_close_req_arg_t (XDR *, geo_sync_close_req_arg_t*);
extern  bool_t xdr_geo_status_ret_t (XDR *, geo_status_ret_t*);

#else /* K&R C */
extern bool_t xdr_geo_status_t ();
extern bool_t xdr_geo_sync_req_arg_t ();
extern bool_t xdr_geo_sync_data_ret_t ();
extern bool_t xdr_geo_sync_req_ret_t ();
extern bool_t xdr_geo_sync_get_next_req_arg_t ();
extern bool_t xdr_geo_sync_delete_req_arg_t ();
extern bool_t xdr_geo_sync_close_req_arg_t ();
extern bool_t xdr_geo_status_ret_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_GEO_REPLICA_PROTO_H_RPCGEN */
